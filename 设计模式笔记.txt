1、单例模式
每个线程都有自己的线程栈，定义为静态主要是为了在多线程确保类有一个实例；

2、简单工厂模式
优点：
	1、简单工厂模式解决了客户端直接依赖于具体对象的问题，客户端可以消除直接创建对象的责任，而仅仅是消费产品。简单工厂模式实现了对责任的分割；
	2、简单工厂模式也起到了代码复用的作用。
缺点：
	1、工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都会受到影响；
    2、系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，这样就会造成工厂逻辑过于复杂。

3、工厂方法模式
优点：
	1、使用工厂方法实现的系统，如果系统需要添加新产品时，我们可以利用多态性来完成系统的扩展，对于抽象工厂类和具体工厂中的代码都不需要做任何改动；只需新增具体工厂类和具体产品类。
	2、工厂方法模式通过面向对象编程中的多态性来将对象的创建延迟到具体工厂中，从而解决了简单工厂模式中存在的问题，也很好地符合了开放封闭原则（即对扩展开发，对修改封闭）。
缺点：
	1、一个工厂只创建一种产品
知识点：
	1、抽象工厂类：创建抽象产品类接口，任何具体工厂类都必须继承该抽象类；
	2、具体工厂类：用来创建具体产品类；
	3、抽象产品类：定义抽象方法，任何具体产品类都应该继承该类
	4、具体产品类：实现抽象产品类对定义的抽象方法，由具体工厂类创建，它们之间有一一对应的关系。

4、抽象工厂模式
优点：
	1、抽象工厂模式允许客户使用抽象的接口来创建一组相关产品，而不需要知道或关心实际生产出的具体产品是什么。这样客户就可以从具体产品中被解耦。
	2、抽象工厂模式对于系列产品的变化支持 “开放——封闭”原则，扩展只需要添加：具体工厂类、具体一组相关产品类。
	3、抽象工厂模式将具体产品的创建延迟到具体工厂的子类中，这样将对象的创建封装起来，可以减少客户端与具体产品类之间的依赖，从而使系统耦合度低，这样更有利于后期的维护和扩展
缺点：
	1、抽象工厂模式很难支持新种类产品的变化。这是因为抽象工厂接口中已经确定了可以被创建的产品集合，如果需要添加新产品，此时就必须去修改抽象工厂的接口，这样就涉及到抽象工厂类的以及所有子类的改变，这样也就违背了“开发——封闭”原则。

5、建造者模式
关键代码：建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。
意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。
主要解决：主要解决在软件系统中，有时候面临着"一个复杂对象"的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。
何时使用：一些基本部件不会变，而其组合经常变化的时候。
优点： 1、建造者独立，易扩展。 2、便于控制细节风险。
缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。